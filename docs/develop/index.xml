<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on ODA Documentation Site</title>
    <link>https://amplia-iiot.github.io/oda-docs/develop/index.html</link>
    <description>Recent content in Develop on ODA Documentation Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://amplia-iiot.github.io/oda-docs/develop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bundle configuration</title>
      <link>https://amplia-iiot.github.io/oda-docs/develop/bundleconfiguration/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://amplia-iiot.github.io/oda-docs/develop/bundleconfiguration/index.html</guid>
      <description>Get bundle configuration from file Like ODA bundles, we can make our bundle to get its configuration from a file and to react to changes in this configuration file.
The configuration file must have the same name as the java package of our bundle.
To achieve this we must create two classes in our code.
One class will be the one containing the parameters our bundle needs. In this example our bundle needs two parameters that are two strings.</description>
    </item>
    <item>
      <title>Counter Manager</title>
      <link>https://amplia-iiot.github.io/oda-docs/develop/countermanager/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://amplia-iiot.github.io/oda-docs/develop/countermanager/index.html</guid>
      <description>How to create your own counters Import counters in your bundle You have to get the counter manager bundle in your code. For this you can create a new CounterManagerProxy in your Activator.java file, like this:
Create your own counters For creating your own couter you have to create a new class that extends from Counter.java, create an enum for your configured counters and save a reference to counter manager. This is an example:</description>
    </item>
    <item>
      <title>DataStream Getter</title>
      <link>https://amplia-iiot.github.io/oda-docs/develop/datastreamgetter/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://amplia-iiot.github.io/oda-docs/develop/datastreamgetter/index.html</guid>
      <description>Request data periodically from devices not supported Using ODA capabilities we can easily implement our solution to retrieve data from a device.
Implement DatastreamGetter Using ODA capabilities we can easily make a bundle to request data periodically from a device.
For our bundle to implement this functionaility we must create a class that implements DatastreamsGetter. It will have three public methods:
getDatastreamIdSatisfied
returns the id of the datastream that will be associated with the data collected from this device</description>
    </item>
    <item>
      <title>New operation</title>
      <link>https://amplia-iiot.github.io/oda-docs/develop/customoperation/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://amplia-iiot.github.io/oda-docs/develop/customoperation/index.html</guid>
      <description>Implement new operation To implement an operation in our bundle we must create a class that implements the interface CustomOperation.
This interface has two methods:
getOperationSatisfied - returns the Id of the operation
execute - this methods execute the operation
After this class is implemented we must register the operation in the framework. We can do this using the class ServiceRegistration.
ServiceRegistration&amp;lt;CustomOperation&amp;gt; = bundleContext.registerService(CustomOperation.class, new TestCustomOperation(), null); To use this operation we must create the operation in OpenGate with the same name as the id defined in the CustomOperation class.</description>
    </item>
  </channel>
</rss>