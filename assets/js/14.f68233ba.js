(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{216:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"connectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connectors"}},[t._v("#")]),t._v(" Connectors")]),t._v(" "),a("p",[t._v("The connectors layer handle data at low level to send it and receive it to/from the Internet.")]),t._v(" "),a("p",[t._v("The action of sending data to the Internet is called "),a("strong",[t._v("uplink")]),t._v(" and all connectors must be able to implement it.")]),t._v(" "),a("p",[t._v("Some connectors are able to receive operations from third systems (usually OpenGate) and answer with the operation response. This feature is implemented in a message received callback.\nAvailable operations are defined in "),a("router-link",{attrs:{to:"/layers/operations/"}},[t._v("operations section")])],1),t._v(" "),a("h4",{attrs:{id:"opengate-connectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengate-connectors"}},[t._v("#")]),t._v(" OpenGate Connectors")]),t._v(" "),a("p",[t._v("The OpenGate connectors modules are responsible for sending the byte stream to Internet through the implemented protocol.")]),t._v(" "),a("p",[t._v("The following protocols are implemented in ODA:")]),t._v(" "),a("ul",[a("li",[a("router-link",{attrs:{to:"/layers/connectors/coap.html#coap"}},[a("strong",[t._v("CoAP")])]),t._v(": Allow to send IoT data and receive operations")],1),t._v(" "),a("li",[a("router-link",{attrs:{to:"/layers/connectors/http.html#http"}},[a("strong",[t._v("HTTP")])]),t._v(": Allow to send IoT data.")],1),t._v(" "),a("li",[a("router-link",{attrs:{to:"/layers/connectors/websocket.html#websocket"}},[a("strong",[t._v("WebSocket")])]),t._v(": Allow to send IoT data and receive operations.")],1),t._v(" "),a("li",[a("router-link",{attrs:{to:"/layers/connectors/mqtt.html#mqtt"}},[a("strong",[t._v("MQTT")])]),t._v(": Allow to send IoT data and receive operations.")],1)]),t._v(" "),a("p",[t._v("To add new protocols you have to implement the "),a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/blob/master/oda-core/commons/src/main/java/es/amplia/oda/core/commons/interfaces/OpenGateConnector.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenGateConnector"),a("OutboundLink")],1),t._v(" interface:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OpenGateConnector")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uplink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" payload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContentType")]),t._v(" contentType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isConnected")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The "),a("em",[t._v("uplink")]),t._v(" method should send the byte array following the implemented protocol and add the content type if the protocol allows it.")]),t._v(" "),a("p",[t._v("The "),a("em",[t._v("isConnected")]),t._v(" method is used to check if the connector is connected.")]),t._v(" "),a("h4",{attrs:{id:"scada-connectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scada-connectors"}},[t._v("#")]),t._v(" SCADA connectors")]),t._v(" "),a("p",[t._v("The SCADA connectors are specific connector for SCADA protocols that works at a higher level than byte array.")]),t._v(" "),a("p",[t._v("There are two available protocols:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"iec104#iec104"}},[a("strong",[t._v("IEC 104")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"dnp3#dnp3"}},[a("strong",[t._v("DNP3")])])])]),t._v(" "),a("p",[t._v("To implement a new protocol the "),a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/blob/master/oda-core/commons/src/main/java/es/amplia/oda/core/commons/interfaces/ScadaConnector.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("ScadaConnector"),a("OutboundLink")],1),t._v(" should be implemented:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScadaConnector")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uplink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("S")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timestamp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isConnected")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The "),a("em",[t._v("uplink")]),t._v(" method implement an uplink of the given type and value to the specified index and with the given timestamp.")]),t._v(" "),a("p",[t._v("The "),a("em",[t._v("isConnected")]),t._v(" method is used to check if the connector is connected.")])])}),[],!1,null,null,null);e.default=s.exports}}]);