(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{229:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"modbus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modbus"}},[e._v("#")]),e._v(" MODBUS")]),e._v(" "),a("p",[e._v("This Datastream module enable to register the datastreams of "),a("router-link",{attrs:{to:"/layers/hardware/modbus.html"}},[e._v("Modbus Hardware module")]),e._v(".")],1),e._v(" "),a("p",[e._v("This datastreams corresponds to the inputs/outputs obtained through modbus protocol.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-datastreams/modbus",target:"_blank",rel:"noopener noreferrer"}},[e._v("To access source code click here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),a("p",[e._v("This module requires the following modules:")]),e._v(" "),a("ul",[a("li",[a("strong",[a("router-link",{attrs:{to:"/layers/hardware/modbus.html"}},[e._v("ModBus Hardware")])],1),e._v(": Provide an implementation of ModBus Master that the datastream module need to connect to the\nbus and collect the information of each datastream.")])]),e._v(" "),a("h4",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("To configure I2C Datastream module, a file named "),a("em",[e._v("es.amplia.oda.datastreams.modbus.cfg")]),e._v(" must be created with the next parameters\nfor each input channel that you want to register:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("datastreamId")]),e._v(": "),a("em",[e._v("Required parameter")]),e._v(". The identifier name of the datastream.")]),e._v(" "),a("li",[a("strong",[e._v("deviceId")]),e._v(": "),a("em",[e._v("Required parameter")]),e._v(". The device identifier name that contents the datastream.")]),e._v(" "),a("li",[a("strong",[e._v("datastreamType")]),e._v(": "),a("em",[e._v("Required parameter")]),e._v(". Name of the Java class that is the datastream. Allowed classes are: "),a("em",[e._v("Boolean,\nByte[], Integer, Long, Short, Float, Double.")])]),e._v(" "),a("li",[a("strong",[e._v("slaveAddress")]),e._v(": "),a("em",[e._v("null if not present")]),e._v(". Direction of the device in modbus.")]),e._v(" "),a("li",[a("strong",[e._v("dataType")]),e._v(": "),a("em",[e._v("Required parameter")]),e._v(". ModBus type of the data recollected from the modbus direction. Allowed classes are:\n"),a("em",[e._v("INPUT_DISCRETE, COIL, INPUT_REGISTER, HOLDING_REGISTER")])]),e._v(" "),a("li",[a("strong",[e._v("dataAddress")]),e._v(": "),a("em",[e._v("null if not present")]),e._v(". Direction of the specific data controlled by datastream inside the device.")])]),e._v(" "),a("p",[a("em",[e._v("es.amplia.oda.datastreams.modbus.cfg")]),e._v(" will have a similar format to:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("light=datastreamType:Long,slaveAddress:1,dataType:INPUT_DISCRETE,dataAddress:255\ntemp,testPi=datastreamType:DOUBLE,slaveAddress:2,dataType:INPUT_REGISTER,dataAddress:100\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);