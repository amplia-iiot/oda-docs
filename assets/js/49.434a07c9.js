(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{253:function(t,e,a){"use strict";a.r(e);var v=a(0),i=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"functions-of-utils-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions-of-utils-js"}},[t._v("#")]),t._v(" Functions of Utils.js")]),t._v(" "),a("p",[t._v("Here they are collected all the functions that "),a("strong",[t._v("utils.js")]),t._v(" provide to use in the rules.")]),t._v(" "),a("h2",{attrs:{id:"control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#control"}},[t._v("#")]),t._v(" Control")]),t._v(" "),a("h3",{attrs:{id:"getting-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-values"}},[t._v("#")]),t._v(" Getting values")]),t._v(" "),a("p",[a("strong",[t._v("getDatastreamValue")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Get the last value from the historic of a datastream in DatastreamValue object format."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(": Actual State of data (state) to use its operations and the metadata (deviceId and datastreamId) of the\ndatastream that function have to get last value."),a("br"),t._v(" "),a("em",[t._v("Output")]),t._v(": The last value of the specified datastream in DatastreamValue format.")]),t._v(" "),a("p",[a("strong",[t._v("getValue")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Obtain from the State the Object Value associated with the datastream id that is passed by parameter."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(": Actual State of data (state) to use its operations and the metadata (deviceId and datastreamId) of the\ndatastream that function have to get last value."),a("br"),t._v(" "),a("em",[t._v("Output")]),t._v(": The last value of the specified datastream in Object format with the class of the value.")]),t._v(" "),a("h3",{attrs:{id:"handling-datastream-value-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#handling-datastream-value-object"}},[t._v("#")]),t._v(" Handling datastream value object")]),t._v(" "),a("p",[a("strong",[t._v("getDatastreamIdFromDatastreamValue")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Get the datastreamId (String) from a DatastreamValue object."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(": DatastreamValue object that the function have to get its datastreamId."),a("br"),t._v(" "),a("em",[t._v("Output")]),t._v(": Datastream id of input DatastreamValue.")]),t._v(" "),a("p",[a("strong",[t._v("getDeviceIdFromDatastreamValue")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Get the deviceId (String) from a DatastreamValue object."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(": DatastreamValue object that the function have to get its deviceId."),a("br"),t._v(" "),a("em",[t._v("Output")]),t._v(": Device id of input DatastreamValue.")]),t._v(" "),a("p",[a("strong",[t._v("getValueFromDatastreamValue")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Obtain the real value of passed DatastreamValue Object."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(": DatastreamValue object that the function have to get its value."),a("br"),t._v(" "),a("em",[t._v("Output")]),t._v(": Real value of the DatastreamValue.")]),t._v(" "),a("h3",{attrs:{id:"adding-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-values"}},[t._v("#")]),t._v(" Adding values")]),t._v(" "),a("p",[a("strong",[t._v("setValueFromDatastreamValue")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Change the last value of a existing datastream, using a DatastreamValue object as input to change the value.\n"),a("em",[t._v("Input")]),t._v(": Actual state of the stateManager (state), a String that specified the device id (deviceId), a String that\nspecifies the datastream id (datastreamId) and new DatastreamValue for that datastream (value)."),a("br"),t._v(" "),a("em",[t._v("Output")]),t._v(": Refreshed state with the new value set as last value of the datastream.")]),t._v(" "),a("p",[a("strong",[t._v("setValue")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Change the last value of a existing datastream, using a real value in simply format\n(boolean, string, integer, etc.) as input.\n"),a("em",[t._v("Input")]),t._v(": Actual state of the stateManager (state), a String that specified the device id (deviceId), a String that\nspecifies the datastream id (datastreamId) and new value for that datastream (value)."),a("br"),t._v(" "),a("em",[t._v("Output")]),t._v(": Refreshed state with the new value set as last value of the datastream.")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[t._v("#")]),t._v(" Filter")]),t._v(" "),a("p",[a("strong",[t._v("filterBetween")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Filter the value between a minimum and a maximum (both included) and return a true if and only if value is\nbetween."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("value: Object Value that we are filtering.")]),t._v(" "),a("li",[t._v("min: Minimum value that we are expecting from value.")]),t._v(" "),a("li",[t._v("max: Maximum value that we are expecting from value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": True if and only if value is between min and max, false in another case.")]),t._v(" "),a("p",[a("strong",[t._v("filterLessOrEqualsThan")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Filter the value under a maximum value (including that value) and return true if is less than max."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("value: Object Value that we are filtering.")]),t._v(" "),a("li",[t._v("max: Maximum value that we are expecting from value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": True if and only if value is less or equals than max, false in another case.")]),t._v(" "),a("p",[a("strong",[t._v("filterMoreOrEqualsThan")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Filter the value over a minimum value (including that value) and return true if is less than min."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("value: Object Value that we are filtering.")]),t._v(" "),a("li",[t._v("min: Minimum value that we are expecting from value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": True if and only if value is less or equals than min, false in another case.")]),t._v(" "),a("p",[a("strong",[t._v("filterLessThan")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Filter the value under a maximum value and return true if is less than max."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("value: Object Value that we are filtering.")]),t._v(" "),a("li",[t._v("max: Maximum value that we are expecting from value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": True if and only if value is less than max, false in another case.")]),t._v(" "),a("p",[a("strong",[t._v("filterEqualsThan")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Filter if the value is the specified and return true if is exactly than data."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("value: Object Value that we are filtering.")]),t._v(" "),a("li",[t._v("data: Value that we are expecting from value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": True if and only if value is the specified, false in another case.")]),t._v(" "),a("p",[a("strong",[t._v("filterMoreThan")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Filter the value over a minimum value and return true if is more than min."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("value: Object Value that we are filtering.")]),t._v(" "),a("li",[t._v("min: Minimum value that we are expecting from value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": True if and only if value is more than min, false in another case.")]),t._v(" "),a("p",[a("strong",[t._v("filterExpectedValues")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Filter if the value exists in a list of values and return true if it exists."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("value: Object Value that we are filtering.")]),t._v(" "),a("li",[t._v("expected: Array of values that we are expecting from value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": True if and only if value is in expected, false in another case.")]),t._v(" "),a("h2",{attrs:{id:"derived"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#derived"}},[t._v("#")]),t._v(" Derived")]),t._v(" "),a("p",[a("strong",[t._v("sum")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Add a quantity to the actual value. To create a new Object Value, we need the state, that is the Java object that handle that creation."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("state: State object that we will use to create the new Object Value.")]),t._v(" "),a("li",[t._v("value: Object Value that we want to add the quantity.")]),t._v(" "),a("li",[t._v("quantity: Quantity to add to the value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": New Object Value with the real value modified.")]),t._v(" "),a("p",[a("strong",[t._v("sub")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Subtract a quantity to the actual value. To create a new Object Value, we need the state, that is the Java object that handle that creation."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("state: State object that we will use to create the new Object Value.")]),t._v(" "),a("li",[t._v("value: Object Value that we want to subtract the quantity.")]),t._v(" "),a("li",[t._v("quantity: Quantity to subtract to the value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": New Object Value with the real value modified.")]),t._v(" "),a("p",[a("strong",[t._v("mult")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Multiply a quantity by the actual value. To create a new Object Value, we need the state, that is the Java object that handle that creation."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("state: State object that we will use to create the new Object Value.")]),t._v(" "),a("li",[t._v("value: Object Value that we want to multiply by the quantity.")]),t._v(" "),a("li",[t._v("quantity: Quantity to multiply the value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": New Object Value with the real value modified.")]),t._v(" "),a("p",[a("strong",[t._v("div")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Divide a quantity by the actual value. To create a new Object Value, we need the state, that is the Java object that handle that creation."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("state: State object that we will use to create the new Object Value.")]),t._v(" "),a("li",[t._v("value: Object Value that we want to divide by the quantity.")]),t._v(" "),a("li",[t._v("quantity: Quantity to divide the value.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": New Object Value with the real value modified.")]),t._v(" "),a("p",[t._v("##Utils")]),t._v(" "),a("p",[a("strong",[t._v("conditionalValue")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Like a Ternary Operator, return a value if the condition is true and another value if the condition is false."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("condition: bool value that control what value will be returned in a new Object Value.")]),t._v(" "),a("li",[t._v("deviceId: String with the deviceId of the Object Value.")]),t._v(" "),a("li",[t._v("datastreamId: String with the datastreamId of the Object Value.")]),t._v(" "),a("li",[t._v("valueTrue: value what be set in the created Object Value if condition is true.")]),t._v(" "),a("li",[t._v("valueFalse: value what be set in the created Object Value if condition is false.")]),t._v(" "),a("li",[t._v("state: actual state to use its functions to refresh its data.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": New Object Value with the new value, valueTrue if condition is true and valueFalse if condition is false.")]),t._v(" "),a("p",[a("strong",[t._v("exists")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Check if a datastream is registered in the state."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("state: Current state of the State Manager.")]),t._v(" "),a("li",[t._v("datastreamIdRequired: Id of the datastream that we are looking for.")])]),t._v(" "),a("p",[a("em",[t._v("Output")]),t._v(": Return true if the datastream is in the state and false if not.")]),t._v(" "),a("p",[a("strong",[t._v("sendImmediately")]),a("br"),t._v(" "),a("em",[t._v("Function")]),t._v(": Mark the datastream to send immediately when all rules are resolved."),a("br"),t._v(" "),a("em",[t._v("Input")]),t._v(":  The device id (String) and the datastream id (String) of the datastream that function have to mark."),a("br"),t._v(" "),a("em",[t._v("Output")]),t._v(":  Nothing, only refresh the state data.")])])}),[],!1,null,null,null);e.default=i.exports}}]);