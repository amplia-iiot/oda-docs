(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{220:function(e,t,o){"use strict";o.r(t);var r=o(0),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h3",{attrs:{id:"coap"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#coap"}},[e._v("#")]),e._v(" COAP")]),e._v(" "),o("p",[e._v("This connector enables communication via "),o("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-connectors/coap",target:"_blank",rel:"noopener noreferrer"}},[e._v("CoAP Protocol"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("p",[e._v("Only allows to send data to the OpenGate platform. Operations can't be received.")]),e._v(" "),o("h4",{attrs:{id:"dependencies"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),o("p",[e._v("This module requires the following modules:")]),e._v(" "),o("ul",[o("li",[o("strong",[o("router-link",{attrs:{to:"/infrastructure/core.html"}},[e._v("Core Commons")])],1),e._v(": Provides many interfaces that this module will use.")]),e._v(" "),o("li",[o("strong",[o("router-link",{attrs:{to:"/layers/datastreams/deviceinfo.html"}},[e._v("Device Info Provider")])],1),e._v(": Needed to know the Device Id of the device that are running the Agent, and the API Key to access to OpenGate.\nBoth data are required to achieve a connection with OpenGate and transferred data will have the deviceId in its metadata.")]),e._v(" "),o("li",[o("strong",[o("router-link",{attrs:{to:"/layers/hardware/atserver.html"}},[e._v("AT Server")])],1),e._v(": If connector is configured as AT type connector, this is necessary to use AT commands in the connector.")])]),e._v(" "),o("h4",{attrs:{id:"configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),o("p",[e._v("To configure CoAP connector, a file named "),o("em",[e._v("es.amplia.oda.connector.coap.cfg")]),e._v(" must be created with the next parameters:")]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("type")]),e._v(": "),o("em",[e._v("UDP Connector by default")]),e._v(". The available options are: UDP, DTLS, AT. Specify the type of connector that CoAP connector will be.")]),e._v(" "),o("li",[o("strong",[e._v("host")]),e._v(": "),o("em",[e._v("Required data")]),e._v(". Specify the direction of the third system the connector have to send the data.")]),e._v(" "),o("li",[o("strong",[e._v("port")]),e._v(": "),o("em",[e._v("Automatically search a default")]),e._v(". Port though the connector have to connect to the host.")]),e._v(" "),o("li",[o("strong",[e._v("path")]),e._v(": "),o("em",[e._v("Required data")]),e._v(". Main section of the URI where the connector have to handle the data.")]),e._v(" "),o("li",[o("strong",[e._v("provisionPath")]),e._v(": "),o("em",[e._v("Required data")]),e._v(". Last section of the URI.")]),e._v(" "),o("li",[o("strong",[e._v("timeout")]),e._v(": "),o("em",[e._v("30 by default")]),e._v(". Time connector will wait to achieve the connection.")]),e._v(" "),o("li",[o("strong",[e._v("messageProtocolVersion")]),e._v(": "),o("em",[e._v("1.0.0 by default")]),e._v(". Version of the protocol used to send the data.")]),e._v(" "),o("li",[o("strong",[e._v("localPort")]),e._v(": "),o("em",[e._v("4123 by default")]),e._v(". Port Of th current device where the connector will connect.")]),e._v(" "),o("li",[o("strong",[e._v("keyStoreType")]),e._v(": "),o("em",[e._v('"JKS" by default')]),e._v(". Is the type of the KeyStore that the connector will use.")]),e._v(" "),o("li",[o("strong",[e._v("keyStoreLocation")]),e._v(": "),o("em",[e._v("null if not specified")]),e._v(", "),o("em",[e._v("Required if connector type is DTLS")]),e._v(". Directory where the file of keys will be stored.")]),e._v(" "),o("li",[o("strong",[e._v("keyStorePassword")]),e._v(": "),o("em",[e._v("null if not specified")]),e._v(", "),o("em",[e._v("Required if connector type is DTLS")]),e._v(". Password to access to the KeyStore.")]),e._v(" "),o("li",[o("strong",[e._v("clientKeyAlias")]),e._v(": "),o("em",[e._v('"client" by default')]),e._v(". Alias used to find in KeyStore and TrustStore the key needed to connect.")]),e._v(" "),o("li",[o("strong",[e._v("trustStoreType")]),e._v(": "),o("em",[e._v('"JKS" by default')]),e._v(". Is the type of the TrustStore that the connector will use.")]),e._v(" "),o("li",[o("strong",[e._v("trustStoreLocation")]),e._v(": "),o("em",[e._v("null if not specified")]),e._v(", "),o("em",[e._v("Required if connector type is DTLS")]),e._v(". Directory where the file of keys will be stored.")]),e._v(" "),o("li",[o("strong",[e._v("trustStorePassword")]),e._v(": "),o("em",[e._v("null if not specified")]),e._v(", "),o("em",[e._v("Required if connector type is DTLS")]),e._v(". Password to access to the TrustStore.")]),e._v(" "),o("li",[o("strong",[e._v("trustedCertificates")]),e._v(": "),o("em",[e._v("null if not specified")]),e._v(", "),o("em",[e._v("Required if connector type is DTLS")]),e._v(". Names of certificates separated by commas.")])]),e._v(" "),o("p",[e._v("The file "),o("em",[e._v("es.amplia.oda.connector.coap.cfg")]),e._v(" can have several formats:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("type=UDP\nhost=localhost\npath=v80/devices\nprovisionPath=collect/iot\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("type=DTLS\nhost=localhost\npath=v80/devices\nprovisionPath=collect/iot\nkeyStoreLocation=path/to/keyStore\nkeyStorePassword=passToAccess\ntrustStoreLocation=path/to/trustStore\ntrustStorePassword=passToAccess\ntrustedCertificates=certificates,separated,by,commas\n")])])]),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("type=AT\nhost=localhost\npath=v80/devices\nprovisionPath=collect/iot\n")])])]),o("h4",{attrs:{id:"source-code"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#source-code"}},[e._v("#")]),e._v(" Source Code")]),e._v(" "),o("p",[e._v("You can check the source code "),o("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-connectors/coap",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),o("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);