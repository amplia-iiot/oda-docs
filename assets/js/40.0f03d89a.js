(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{244:function(e,t,r){"use strict";r.r(t);var a=r(0),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"discover"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#discover"}},[e._v("#")]),e._v(" Discover")]),e._v(" "),r("p",[e._v("This operation is used to send to another MQTT client a request to enable all datastreams provided by the device that\nowns that client. When the request was processed by the remote device, ODA expects that a message enabling all the datastreams\nwas send by the remote device.")]),e._v(" "),r("p",[e._v("This operations will send the request message serialized in CBOR format to a specific topic selected by configuration.")]),e._v(" "),r("h4",{attrs:{id:"dependencies"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),r("ul",[r("li",[r("router-link",{attrs:{to:"/infrastructure/core.html"}},[e._v("Commons")]),e._v(": Required to provide the commons utils, the Operation Discover API and the basic APIs to register the service.")],1),e._v(" "),r("li",[r("router-link",{attrs:{to:"/layers/operations/"}},[e._v("Operation API")]),e._v(": Provides the api of the operation and the enums of the result code.")],1),e._v(" "),r("li",[r("router-link",{attrs:{to:"/infrastructure/comms.html#MQTT"}},[e._v("Comms MQTT")]),e._v(": Provides the classes to use the mqtt client.")],1)]),e._v(" "),r("h4",{attrs:{id:"configuration"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),r("p",[e._v("To configure Discover Operation module, a file named "),r("em",[e._v("es.amplia.oda.operation.discover.cfg")]),e._v(" must be created with the next parameters:")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("brokerURI")]),e._v(":"),r("em",[e._v("Required parameter")]),e._v(". Direction of mqtt broker where the client have to connect.")]),e._v(" "),r("li",[r("strong",[e._v("clientId")]),e._v(":"),r("em",[e._v("Random if not specified")]),e._v(". Id of the client that the operation will create to do the operation. Must to be different\nthat the MQTT client id of the MQTT connector if it's present.")]),e._v(" "),r("li",[r("strong",[e._v("discoverTopic")]),e._v(":"),r("em",[e._v("Required parameter")]),e._v(". Topic where the another MQTT client expects that the discovery request will be sent.")])]),e._v(" "),r("h4",{attrs:{id:"trace"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#trace"}},[e._v("#")]),e._v(" Trace")]),e._v(" "),r("p",[e._v("The trace send by the third system (e.g. OpenGate) to the ODA to do this operation is like this:")]),e._v(" "),r("p",[e._v('\'{"operation":{"request":{"timestamp":1557306193823,"deviceId":"aDevice","name":"DISCOVER","parameters":[],"id":"73da9ff8-15a9-4e9a-9b2d-b6e5efbc856b"}}}\'')])])}),[],!1,null,null,null);t.default=i.exports}}]);