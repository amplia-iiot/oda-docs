(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{240:function(e,t,i){"use strict";i.r(t);var a=i(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h3",{attrs:{id:"jdk-dio"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#jdk-dio"}},[e._v("#")]),e._v(" JDK DIO")]),e._v(" "),i("p",[e._v("Implementation of the library JDK DIO to give an access to digital in/outputs.\nThis is the hardware module that give support to GPIO Datastreams.")]),e._v(" "),i("p",[i("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-hardware/jdkdio",target:"_blank",rel:"noopener noreferrer"}},[e._v("To access source code click here"),i("OutboundLink")],1),e._v(".")]),e._v(" "),i("h4",{attrs:{id:"dependencies"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),i("p",[e._v("This module requires the following modules:")]),e._v(" "),i("ul",[i("li",[i("strong",[i("router-link",{attrs:{to:"/infrastructure/core.html"}},[e._v("Commons")])],1),e._v(": Provide the GPIO APIs, exceptions and types and the basic APIs to register the service.")])]),e._v(" "),i("h4",{attrs:{id:"configuration"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),i("p",[e._v("To configure JDK DIO Hardware module, a file named "),i("em",[e._v("es.amplia.oda.hardware.jdkdio.cfg")]),e._v(" must be created with the next parameters\nfor each input channel that you want to register:")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("index")]),e._v(": "),i("em",[e._v("Required parameter")]),e._v(". Index of the pin.")]),e._v(" "),i("li",[i("strong",[e._v("deviceType")]),e._v(": "),i("em",[e._v('"" (void String) by default')]),e._v(". Type of this pin. gpio.GPIOPin for specify an digital pin.")]),e._v(" "),i("li",[i("strong",[e._v("name")]),e._v(": "),i("em",[e._v("Required parameter")]),e._v(". Unique name for the pin.")]),e._v(" "),i("li",[i("strong",[e._v("direction")]),e._v(": "),i("em",[e._v("OUTPUT by default")]),e._v(". Specify if pin is open as in or out. Allowed directions are INPUT or OUTPUT.")]),e._v(" "),i("li",[i("strong",[e._v("mode")]),e._v(": "),i("em",[e._v("OPEN_DRAIN by default")]),e._v(". Specify the mode of the pin. Allowed modes are PULL_UP, PULL_DOWN, OPEN_DRAIN and PUSH_PULL.\nThe first two are modes for OUTPUT pins and the last two are for INPUT pins.")]),e._v(" "),i("li",[i("strong",[e._v("trigger")]),e._v(": "),i("em",[e._v("NONE by default")]),e._v(". Trigger the pin changes the value. Allowed values are NONE, FALLING_EDGE, RISING_EDGE, BOTH_EDGES,\nLOW_LEVEL, HIGH_LEVEL, BOTH_LEVELS. For the outputs pins, as they doesn't change value by themselves, the only one trigger valid is NONE.")]),e._v(" "),i("li",[i("strong",[e._v("activeLow")]),e._v(": "),i("em",[e._v("false by default")]),e._v(". ActiveLow option (reverses the values of the pin). True if activeLow is enabled.")]),e._v(" "),i("li",[i("strong",[e._v("initialValue")]),e._v(": "),i("em",[e._v("false by default")]),e._v(". Specify the initial value of the pin. On input pins this option can be changed quickly.")])]),e._v(" "),i("p",[i("em",[e._v("es.amplia.oda.hardware.jdkdio.cfg")]),e._v(" will have a similar format to:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("1=deviceType:gpio.GPIOPin,name:lightOn\n4=deviceType:gpio.GPIOPin,name:lightHigh,direction:input,mode:PUSH_PULL,trigger:LOW_LEVEL,activeLow:false,initialValue:true\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);