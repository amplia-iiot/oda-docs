(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{232:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"event-dispatcher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-dispatcher"}},[e._v("#")]),e._v(" Event Dispatcher")]),e._v(" "),a("p",[e._v("The event dispatcher is responsible for receiving the events generated in the device and sending them through the available connectors.")]),e._v(" "),a("p",[e._v("The interface defining the service is the "),a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/blob/master/oda-events/api/src/main/java/es/amplia/oda/event/api/EventDispatcher.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("EventDispatcher"),a("OutboundLink")],1),e._v(" interface and the main method is the "),a("strong",[e._v("publish")]),e._v(" method that receives an event:")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("EventDispatcher")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("publish")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Event")]),e._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Events objects are explained in the "),a("router-link",{attrs:{to:"/layers/eventdispatcher/events.html"}},[e._v("Events page")]),e._v(".")],1),e._v(" "),a("h4",{attrs:{id:"opengate-event-dispatcher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengate-event-dispatcher"}},[e._v("#")]),e._v(" OpenGate Event Dispatcher")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/blob/master/oda-dispatchers/opengate/src/main/java/es/amplia/oda/dispatcher/opengate/event/EventDispatcherImpl.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenGate Event Dispatcher"),a("OutboundLink")],1),e._v(" publishes the received events through an OpenGate connector with the "),a("a",{attrs:{href:"http://jekyll.amplia.es/OpenGateDoc/LATEST/opengate-doc-api/api-south/opengate-api-south.html#collect_history",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenGate IOT JSON"),a("OutboundLink")],1),e._v(" format.")]),e._v(" "),a("p",[e._v("The "),a("strong",[e._v("publish")]),e._v(" method use the proper serializer to serialize the received event to the configured content-type and send it to the active OpenGate Connector.")]),e._v(" "),a("h5",{attrs:{id:"dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),a("ul",[a("li",[a("strong",[a("router-link",{attrs:{to:"/infrastructure/services.html#Serialization"}},[e._v("Serializers")])],1),e._v(": Any needed implementation of Serializer Service that the dispatcher will need to de/serialize the payloads.")]),e._v(" "),a("li",[a("strong",[a("router-link",{attrs:{to:"/layers/datastreams/deviceinfo.html"}},[e._v("Device Info Provider")])],1),e._v(": Needed to know the Device Id of the device that are running the Agent and the API Key to access to OpenGate.")]),e._v(" "),a("li",[a("strong",[e._v("[OpenGate Connector](../connectors/README.md#OpenGate Connectors)")]),e._v(": Needed to send data and respond to requests of OpenGate.")])]),e._v(" "),a("h5",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("The Event Dispatcher can be configured with the following global properties:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("reducedOutput")]),e._v(": Use a reduced IOT format, removing all optional fields, to decrease the bandwidth consumed. The default value is "),a("em",[e._v("false")])]),e._v(" "),a("li",[a("strong",[e._v("eventContentType")]),e._v(": Content-type of the published events. The default content-type format is "),a("em",[e._v("JSON")]),e._v(".")])]),e._v(" "),a("p",[e._v("Using a decorator pattern, the "),a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/blob/master/oda-dispatchers/opengate/src/main/java/es/amplia/oda/dispatcher/opengate/event/EventCollectorImpl.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("Event Collector"),a("OutboundLink")],1),e._v(" allows to store the events of some configured datastreams to send multiple datapoints in the same message at a configured period of time. Each datastream is configured in a line in the configuration file with the following format:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("datastreamId;deviceId=initialDelay;period\n")])])]),a("p",[e._v("The configuration is built with the properties:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("datastreamId")]),e._v(": Datastream identifier configured.")]),e._v(" "),a("li",[a("strong",[e._v("deviceId")]),e._v(": Device identifier configured. If not set, the current configuration is applied to all devices. "),a("em",[e._v("Optional")])]),e._v(" "),a("li",[a("strong",[e._v("initialDelay")]),e._v(": First time the collected events are sent. "),a("em",[e._v("Optional")])]),e._v(" "),a("li",[a("strong",[e._v("period")]),e._v(": Period in which the collected events are sent. May be "),a("em",[e._v("0")]),e._v(" to configure a datastream that must be sent just one time when ODA starts.")])]),e._v(" "),a("p",[e._v("An example of a valid configuration may be:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("reducedOutput=true                  # Use reduce output\neventContentType=JSON               # Use JSON format content-type\ndevice.software=30;0                # Send all devices software 30 seconds after start-up and do not sending again\ndevice.temperature.value=60         # Send all devices temperatures every 60 seconds\ncurrent;sectionalizer123=30;300     # Send the sectionalizer123 current 30 seconds after start-up and every 5 minutes.\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);