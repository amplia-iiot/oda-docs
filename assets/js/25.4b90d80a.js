(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{228:function(e,t,a){"use strict";a.r(t);var r=a(0),i=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"i2c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i2c"}},[e._v("#")]),e._v(" I2C")]),e._v(" "),a("p",[e._v("This Datastream module enable to register the datastreams of "),a("router-link",{attrs:{to:"/layers/hardware/i2c.html"}},[e._v("I2C Hardware module")]),e._v(".")],1),e._v(" "),a("p",[e._v("This datastreams corresponds to the I2C devices connected to the device.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-datastreams/i2c",target:"_blank",rel:"noopener noreferrer"}},[e._v("To access source code click here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),a("p",[e._v("This module requires the following modules:")]),e._v(" "),a("ul",[a("li",[a("strong",[a("router-link",{attrs:{to:"/layers/hardware/i2c.html"}},[e._v("I2C Hardware")])],1),e._v(": Provide an implementation of I2C Service that the datastream module need to provide information of each datastream.")])]),e._v(" "),a("h4",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("To configure I2C Datastream module, a file named "),a("em",[e._v("es.amplia.oda.datastreams.i2c.cfg")]),e._v(" must be created with the next parameters\nfor each input channel that you want to register:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("name")]),e._v(": "),a("em",[e._v("Required parameter")]),e._v(". Identifier name of the datastream.")]),e._v(" "),a("li",[a("strong",[e._v("getter")]),e._v(": "),a("em",[e._v("true by default")]),e._v(". Enable the option to use this channel as datastream getter (have to check the value manually\nevery time that want to know actual value).")]),e._v(" "),a("li",[a("strong",[e._v("setter")]),e._v(": "),a("em",[e._v("false by default")]),e._v(". Enable the option to use this channel as datastream setter (have to send a operation to change the value of this datastream).")]),e._v(" "),a("li",[a("strong",[e._v("device")]),e._v(": "),a("em",[e._v("Required parameter")]),e._v(". Identifier name of the i2c device hardware")]),e._v(" "),a("li",[a("strong",[e._v("min")]),e._v(": "),a("em",[e._v("0 by default")]),e._v(", "),a("em",[e._v("if min > max then min = 0")]),e._v(". Specifies the value that datastream will take when the hardware channel value is in the minimum of the range.")]),e._v(" "),a("li",[a("strong",[e._v("max")]),e._v(": "),a("em",[e._v("1 by default")]),e._v(", "),a("em",[e._v("if min > max then max = 1")]),e._v(". Specifies the value that datastream will take when the hardware channel value is in the maximum of the range")])]),e._v(" "),a("p",[a("em",[e._v("es.amplia.oda.datastreams.i2c.cfg")]),e._v(" will have a similar format to:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lightData=getter:false,setter:true,device:lightDev,min:0,max:10\ntemperatureData=device:temperatureDev\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);