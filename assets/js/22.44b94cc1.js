(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{225:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"adc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adc"}},[e._v("#")]),e._v(" ADC")]),e._v(" "),a("p",[e._v("This Datastream module enable to register the datastreams of "),a("router-link",{attrs:{to:"/layers/hardware/diozero.html"}},[e._v("Diozero Hardware module")]),e._v(".")],1),e._v(" "),a("p",[e._v("This datastreams corresponds to the Analog Input Pins of the device.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-datastreams/adc",target:"_blank",rel:"noopener noreferrer"}},[e._v("To access source code click here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),a("p",[e._v("This module requires the following modules:")]),e._v(" "),a("ul",[a("li",[a("strong",[a("router-link",{attrs:{to:"/layers/hardware/diozero.html"}},[e._v("Dio Zero")])],1),e._v(": Provide an implementation of ADC Service that the datastream module need to provide information of each datastream.")]),e._v(" "),a("li",[e._v("_"),a("em",[e._v("Event Publisher")]),e._v(": Used to handle the incoming events and send it.")])]),e._v(" "),a("h4",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("To configure ADC Datastream module, a file named "),a("em",[e._v("es.amplia.oda.datastreams.adc.cfg")]),e._v(" must be created with the next parameters\nfor each input channel that you want to register:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("channelPin")]),e._v(": "),a("em",[e._v("-1 by default")]),e._v(". Specify the identifier of the Analog input channel.")]),e._v(" "),a("li",[a("strong",[e._v("getter")]),e._v(": "),a("em",[e._v("true by default")]),e._v(". Enable the option to use this channel as datastream getter (have to check the value manually\nevery time that want to know actual value).")]),e._v(" "),a("li",[a("strong",[e._v("event")]),e._v(": "),a("em",[e._v("false by default")]),e._v(". Enable the option to use this channel as datastream event (automatically will send the\nto the Event Handlers when a event is generated).")]),e._v(" "),a("li",[a("strong",[e._v("min")]),e._v(": "),a("em",[e._v("0.0 by default")]),e._v(". Specifies the value that datastream will take when the hardware channel value is in the minimum of the range.")]),e._v(" "),a("li",[a("strong",[e._v("max")]),e._v(": "),a("em",[e._v("1.0 by default")]),e._v(". Specifies the value that datastream will take when the hardware channel value is in the maximum of the range.")])]),e._v(" "),a("p",[a("em",[e._v("es.amplia.oda.datastreams.adc.cfg")]),e._v(" will have a similar format to:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1=getter:true,event:true,min:0,max:10\n2=getter:true,event:false,min:1,max:18\n3=getter:false,event:true,min:-10,max:40\n4=getter:false,event:false,min:0,max:0\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);