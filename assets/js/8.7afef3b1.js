(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{208:function(e,t,a){"use strict";a.r(t);var o=a(0),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"guides"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guides"}},[e._v("#")]),e._v(" Guides")]),e._v(" "),a("p",[e._v("This section will include guides to execute common tasks in ODA development.")]),e._v(" "),a("h3",{attrs:{id:"dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),a("p",[e._v("Some bundles need others to work correctly, because those bundles implements a common api and implements some functions\nthat the first bundles need to use in its operation.")]),e._v(" "),a("p",[e._v("It is important to handle the dependencies, including those bundles that need the modules we will use.")]),e._v(" "),a("p",[e._v("If you need to know what dependencies have a module that you want to use, you can go to its respective documentation page\nor use "),a("router-link",{attrs:{to:"/guides/dependencyTable.html"}},[e._v("this table")]),e._v(".")],1),e._v(" "),a("h3",{attrs:{id:"demos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#demos"}},[e._v("#")]),e._v(" Demos")]),e._v(" "),a("p",[e._v("The demos are examples of a deploy of ODA.")]),e._v(" "),a("p",[e._v("Demos are composed by:")]),e._v(" "),a("ul",[a("li",[e._v("An assembly directory, with a file in xml format that contains what bundles will be included in the demo. This bundles\nare the basic resources of apache and logging and the ODA bundles, which contain the functions of the application.")]),e._v(" "),a("li",[e._v("A resources bundle that contains all the config files, either of the oda or of the apache and gogo console. Also contains\nthe script that will run the ODA.")])]),e._v(" "),a("p",[e._v("To use them, you have to run the command")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mvn clean install\n")])])]),a("p",[e._v("to generate the tar with everything installed. This tar will have a name with the following format")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<name of the demo>-<version of the demo>.tar.bz2\n")])])]),a("p",[e._v("Extract the tar and, if you use a device, move the directory extracted to the device. Change the current directory to\nthe demo directory and enter the command:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("./bin/run.sh\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("If you're running the demo into OWA450, is important run this as su. To do it, run the command with sudo.")])]),e._v(" "),a("h4",{attrs:{id:"provided-demos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provided-demos"}},[e._v("#")]),e._v(" Provided demos")]),e._v(" "),a("p",[e._v("Actually are three provided demos by us that the new users of ODA can use to test.")]),e._v(" "),a("p",[e._v("These demos can be extended, adapted and used as a base to make your own demo thanks to the modularity of the ODA components.")]),e._v(" "),a("h5",{attrs:{id:"coap-demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coap-demo"}},[e._v("#")]),e._v(" COAP Demo")]),e._v(" "),a("p",[e._v("This demo contains the required modules to enable the communication through CoAP, use simulated datastreams,\nhandle operations, handle event and communicate with the OpenGate platform.")]),e._v(" "),a("p",[e._v("This demo can run in any platform just changing the device info module to the specific device info module of it device.")]),e._v(" "),a("p",[e._v("You can see the implementation in "),a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-demos/coap",target:"_blank",rel:"noopener noreferrer"}},[e._v("our repository"),a("OutboundLink")],1)]),e._v(" "),a("h5",{attrs:{id:"mqtt-demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mqtt-demo"}},[e._v("#")]),e._v(" MQTT Demo")]),e._v(" "),a("p",[e._v("This demo contains the required modules to enable the communication through MQTT with Opengate, use simulated datastreams,\nhandle operations and handle event. Also use the In Memory State Manager, that will\nstore values of the events into a state instead of send it, receiving the stored data when we do a get.")]),e._v(" "),a("p",[e._v("This demo can run in any platform just changing the device info module to the specific device info module of it device.")]),e._v(" "),a("p",[e._v("You can see the implementation in "),a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-demos/mqtt",target:"_blank",rel:"noopener noreferrer"}},[e._v("our repository"),a("OutboundLink")],1)]),e._v(" "),a("h5",{attrs:{id:"fx30-mqtt-demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fx30-mqtt-demo"}},[e._v("#")]),e._v(" FX30 MQTT Demo")]),e._v(" "),a("p",[e._v("This demo contains the required modules to enable the communication through MQTT with Opengate, use simulated datastreams,\nhandle operations and handle event.")]),e._v(" "),a("p",[e._v("This demo can run in any platform just changing the device info module to the specific device info module of it device.")]),e._v(" "),a("p",[e._v("You can see the implementation in "),a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-demos/fx30-mqtt",target:"_blank",rel:"noopener noreferrer"}},[e._v("our repository"),a("OutboundLink")],1)]),e._v(" "),a("h4",{attrs:{id:"custom-demos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-demos"}},[e._v("#")]),e._v(" Custom demos")]),e._v(" "),a("p",[e._v("For made your own demo, you have to create the next things:")]),e._v(" "),a("ul",[a("li",[e._v("assembly/xxxxx.xml: This is a file with the same format as a pom.xml that specify the name of the demo and the deploy\nsteps of the demo with the bundles used in the demo.")]),e._v(" "),a("li",[e._v("resources/apacheFelixConfiguration/config.properties: Framework configuration file.")]),e._v(" "),a("li",[e._v("resources/apacheFelixConfiguration/logback.xml: Logger configuration file. Specifies how and where (in which file it\nis stored) the log information have to be stored.")]),e._v(" "),a("li",[e._v("resources/gogoConsoleConfiguration/gosh_profile: Specifies what the console has to write to interact with the user.")]),e._v(" "),a("li",[e._v("resources/gogoConsoleConfiguration/motd: Nothing inside this.")]),e._v(" "),a("li",[e._v("resources/gogoConsoleConfiguration/motd_remote: Initial output of the demo in the console.")]),e._v(" "),a("li",[e._v("resources/gogoConsoleConfiguration/ssh_profile: Specifies what the console has to write to interact with the user if\nthe demo is run through ssh.")]),e._v(" "),a("li",[e._v("resources/odaBundlesConfiguration/*: The configuration files of the bundles. These files have to be named as is specified\nin its documentation page, in the configuration section.")]),e._v(" "),a("li",[e._v("resources/scripts/run.sh: This is the bash script that have to run the ODA application.")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("It is advisable to use a provided demo as base for the custom demo.\nThis is because use existing configuration files, run script and assembly file is easier than made it from scratch.\nInstead of create a new file of assembly, change the bundles included in the dependencySet of the deploy directory to the\ndesired bundles, putting a include section for each bundle included.\nIf a bundle is removed from the assembly file, delete the configuration file of that bundle and, if it is added, add its\nconfiguration file as is explained in the configuration section of its documentation page.")])]),e._v(" "),a("p",[e._v("In order to choose the bundles that will make up the ODA application it's important to know the dependencies of the bundles that\nwe want to use. The dependencies are listed in the Dependencies section of the documentation page of the desired bundle.\nA bundle won't work if its dependencies are not included in the demo.")]),e._v(" "),a("h3",{attrs:{id:"devices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#devices"}},[e._v("#")]),e._v(" Devices")]),e._v(" "),a("p",[e._v("Some bundles have many versions depending on the device where the bundle will be run. That is because the libraries implemented\nuse native code and is require to cross-compile the bundle with the right cross-tools. This bundles are, at this moment:")]),e._v(" "),a("ul",[a("li",[a("router-link",{attrs:{to:"/layers/connectors/dnp3.html"}},[e._v("DNP3 Connector")])],1),e._v(" "),a("li",[a("router-link",{attrs:{to:"/layers/hardware/diozero.html"}},[e._v("ADC Hardware")])],1),e._v(" "),a("li",[a("router-link",{attrs:{to:"/layers/hardware/jdkdio.html"}},[e._v("GPIO Hardware")])],1)]),e._v(" "),a("p",[e._v("To make it work, you have to install the oda-external-dependencies. To do that, you must have installed the cross-tool of\nthe target device and run the install-oda-external-dependencies:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("./install-oda-external-dependencies.sh\n")])])]),a("h4",{attrs:{id:"x86-64-linux-system"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x86-64-linux-system"}},[e._v("#")]),e._v(" x86_64 Linux system")]),e._v(" "),a("p",[e._v("To work in your local x86_64 system is not required any installation of a specific cross-tool. Just run the command of\nexternal dependencies and deploy the ODA application.")]),e._v(" "),a("h4",{attrs:{id:"fx30"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fx30"}},[e._v("#")]),e._v(" FX30")]),e._v(" "),a("p",[e._v("To work in a FX30 device, you must have installed Legato on your computer and put the legato directory on your home directory.")]),e._v(" "),a("p",[e._v("To install the legato application and its cross tool, download its "),a("a",{attrs:{href:"https://source.sierrawireless.com/resources/airprime/software/developer-studio-installinstructions/#sthash.YUYdT817.dpbs",target:"_blank",rel:"noopener noreferrer"}},[e._v("official IDE"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("Remember to extract the content of the downloaded zip in the directory "),a("em",[e._v("$HOME/legato")]),e._v(" or you will have to change the\npath used in the external dependencies pom's to locate the legato cross-tools.")])]),e._v(" "),a("h4",{attrs:{id:"owa450"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#owa450"}},[e._v("#")]),e._v(" OWA450")]),e._v(" "),a("p",[e._v("To work in a OWA device, you must have installed a ng cross-tool on your computer and put it in /opt directory with the\nname "),a("em",[e._v("/opt/gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf")]),e._v(".")]),e._v(" "),a("p",[e._v("To install a ng cross tool follow the next steps:")]),e._v(" "),a("ol",[a("li",[e._v("Download the cross tool with the command: "),a("em",[e._v("wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.23.0.tar.bz2")]),e._v(".")]),e._v(" "),a("li",[e._v("Create a directory called "),a("em",[e._v("gcc-linaro-5.3-2016.02-x86_64_arm-linux-gnueabihf")]),e._v(" in "),a("em",[e._v("/opt")]),e._v(".")]),e._v(" "),a("li",[e._v("Extract the downloaded tar in the directory.")])]),e._v(" "),a("p",[e._v("If any command of the download is missed, you will have to install it, doing an "),a("code",[e._v("apt-get install \\<name of the command>")]),e._v(".\nThis commands are usually gperf, bison, flex, texinfo and help2man.")]),e._v(" "),a("p",[e._v('If an error which contains "lib curses" occurs you have to do an '),a("code",[e._v("apt-get install libncurses-dev")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[e._v("#")]),e._v(" Functions")]),e._v(" "),a("h4",{attrs:{id:"mqtt-communication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mqtt-communication"}},[e._v("#")]),e._v(" MQTT Communication")]),e._v(" "),a("p",[e._v("There are several bundles about the MQTT communication and can be a little confusing understand how to use them. For this\nreason, we have created this guide. To explain what is the point of each bundle and how to deploy it.")]),e._v(" "),a("h5",{attrs:{id:"mqtt-comms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mqtt-comms"}},[e._v("#")]),e._v(" MQTT Comms")]),e._v(" "),a("p",[e._v("This is a kind of interface to the MQTT functionality bundles.")]),e._v(" "),a("p",[e._v("Provides of various interfaces that the MQTT bundles will use and implements to achieve the connection with the remote MQTT\nbroker and the minimum implemented common classes to handle the MQTT local clients that use the functions and classes of\nthe ODA's MQTT library.")]),e._v(" "),a("p",[e._v("The main end of this module is collect all the uses of the MQTT library in one module as hardware modules do with their respective libraries.")]),e._v(" "),a("p",[e._v("The library that implements ODA to handle the MQTT connection is the "),a("a",{attrs:{href:"https://www.eclipse.org/paho/",target:"_blank",rel:"noopener noreferrer"}},[e._v("eclipse paho"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("To add this bundle to the ODA application is not needed another MQTT bundle, but it's necessary (like with the most part\nof ODA bundles) to add the "),a("router-link",{attrs:{to:"/infrastructure/core.html"}},[e._v("Core Commons")]),e._v(". That is because the core commons provides some enums\nthat this module uses.")],1),e._v(" "),a("h5",{attrs:{id:"mqtt-connector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mqtt-connector"}},[e._v("#")]),e._v(" MQTT Connector")]),e._v(" "),a("p",[e._v("This connector allow to connect with the third system platform (e.g. SCADA or OpenGate) in order to send to it the collected\ndata and allow to receive and respond the operation that these platforms can send to ODA.")]),e._v(" "),a("p",[e._v("This module doesn't uses the paho library but requires that the "),a("router-link",{attrs:{to:"/infrastructure/comms.html"}},[e._v("MQTT Comms")]),e._v(" bundle has been added to the ODA.\nIn addition to this, requires the "),a("router-link",{attrs:{to:"/infrastructure/core.html"}},[e._v("Core Commons")]),e._v(". That is because the core commons provides the\nsame enums that uses the MQTT Comms, some interfaces and proxies of other dependencies that this module have and some utils.")],1),e._v(" "),a("h5",{attrs:{id:"mqtt-datastream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mqtt-datastream"}},[e._v("#")]),e._v(" MQTT Datastream")]),e._v(" "),a("p",[e._v("This datastream allow to connect with another device through MQTT and use its registered datastreams. To do this, ODA\nhave to connect to the same broker that the device, ask it for its registered datastreams, enable the datastreams that the\ndevice provides to ODA and, when this is done, made the desired operations about the datastreams controlled by this device.\nTo do the operations on the remote device's datastreams, the connection have to be still alive. To know if is alive or not,\nthe device should have a Last Will Message accorded with the broker that will sent to the ODA if the connection of the device\nis dropped to disable the datastreams in ODA and the device itself have to send a similar message if disconnect correctly.")]),e._v(" "),a("p",[e._v("That messages will have a topic specific to its message type, sending the Last Will messages through one topic, enabling\ndatastreams messages through another, disabling datastreams messages by another...")]),e._v(" "),a("p",[e._v("This module doesn't uses the paho library but requires that the "),a("router-link",{attrs:{to:"/infrastructure/comms.html"}},[e._v("MQTT Comms")]),e._v(" bundle has been added to the ODA.\nIn addition to this, requires the "),a("router-link",{attrs:{to:"/infrastructure/core.html"}},[e._v("Core Commons")]),e._v(". That is because the core commons provides the\nsame enums that uses the MQTT Comms, some interfaces and proxies of other dependencies that this module have and some utils.")],1),e._v(" "),a("h4",{attrs:{id:"inputs-and-outputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inputs-and-outputs"}},[e._v("#")]),e._v(" Inputs and Outputs")]),e._v(" "),a("p",[e._v("There are several ways to receive the in/output of the devices handled by the ODA. The most frequent services are the ADC\nand DIO, these items are hardware implementation of two different libraries that allow to read and write Analog and Digital\nin/outputs respectively.\nAlso exists the I2C protocol that is used to communicate between different parts of the same device (sensors, expansion cards, etc.).")]),e._v(" "),a("h5",{attrs:{id:"digital-in-outputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#digital-in-outputs"}},[e._v("#")]),e._v(" Digital In/Outputs")]),e._v(" "),a("p",[e._v("The Digital Inputs Outputs (DIO) hardware module is an implementation of the "),a("a",{attrs:{href:"https://github.com/openjdk/jdk",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenJDK"),a("OutboundLink")],1),e._v(" library.")]),e._v(" "),a("p",[e._v("This Hardware Module allows to read the data from the Digital Inputs and write to digital Outputs.")]),e._v(" "),a("p",[e._v("This module requires that the device that contains it implements the "),a("a",{attrs:{href:"https://www.kernel.org/doc/Documentation/gpio/sysfs.txt",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sysfs Interface"),a("OutboundLink")],1),e._v(",\nwhich is what this module will use. In case of not been implemented, it can't be used unless we implement an adapter\nservice that will always run since the boot of the device.\nThis adapter is implemented "),a("a",{attrs:{href:"https://github.com/amplia-iiot/owa_input_parser",target:"_blank",rel:"noopener noreferrer"}},[e._v("in our repository"),a("OutboundLink")],1),e._v(" for the OWA450 device.")]),e._v(" "),a("p",[e._v("If the kernel of the device is over 4.4 is probably that the gpio directory and the un/export command doesn't work. In\nthat case the directory "),a("em",[e._v("/sys/class/gpio")]),e._v(" have to be created with two files in it, the export file that will create the\ndigital pin controller if the command "),a("code",[e._v("echo X > export")]),e._v(" is run (where X is the number of the pin) and the unexport file\nthat will remove the digital pin controller if the command "),a("code",[e._v("echo X > unexport")]),e._v(" is run (where X is the number of the pin).")]),e._v(" "),a("p",[e._v("It is important configure the pin with the desired properties for the target pin. To do this, we have a module configuration\nwhere, unlike the most of modules, specifies multiple configurations in one file. For each line of the configuration file,\nwe are specifying the configuration of one pin that we want the ODA to handle. This configuration is individual to each\npin and will have the next format:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("numberOfTheConfiguredPin=property1:value1,property2:value2,...\nnumberOfAnotherConfigurePin=property1:anotherValue1,property2:anotherValue2,...\n")])])]),a("p",[e._v("For more details to use this module, go to its "),a("router-link",{attrs:{to:"/layers/hardware/jdkdio.html"}},[e._v("documentation page")])],1),e._v(" "),a("h5",{attrs:{id:"analog-in-outputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#analog-in-outputs"}},[e._v("#")]),e._v(" Analog In/Outputs")]),e._v(" "),a("p",[e._v("The Analog to Digital Converter (ADC) hardware module is an implementation of the "),a("a",{attrs:{href:"https://github.com/mattjlewis/diozero",target:"_blank",rel:"noopener noreferrer"}},[e._v("DIOZero"),a("OutboundLink")],1),e._v(" library.")]),e._v(" "),a("p",[e._v("This Hardware Module allows to read the data from Analog Inputs (only for input data).")]),e._v(" "),a("p",[e._v("This module requires that the device firmware handle the input analog data and to keep it in a specific file. If the firmware\ndoesn't keep the data to any file, an adapter has to be created. The adapter, that should be running constantly since boot,\nhas to get the data from the device and keep it in a file.\nThe OWA450 needs an adapter already implemented "),a("a",{attrs:{href:"https://github.com/amplia-iiot/owa_input_parser",target:"_blank",rel:"noopener noreferrer"}},[e._v("in our repository"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Once we have the file with the data stored in it, the module can read the data from the file configuring it. This module's\nconfiguration, unlike the most of modules, specifies multiple configurations in one file. For each line of the configuration file,\nwe are specifying the configuration of one channel that we want the ODA to handle. This configuration is individual to each\nchannel and will have the next format:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("numberOfTheConfiguredChannel=property1:value1,property2:value2,...\nnumberOfAnotherConfigureChannel=property1:anotherValue1,property2:anotherValue2,...\n")])])]),a("p",[e._v("For more details to use this module, go to its "),a("router-link",{attrs:{to:"/layers/hardware/diozero.html"}},[e._v("documentation page")])],1),e._v(" "),a("h5",{attrs:{id:"i2c-protocol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i2c-protocol"}},[e._v("#")]),e._v(" I2C Protocol")]),e._v(" "),a("p",[e._v("The I2C module is an implementation of the "),a("a",{attrs:{href:"https://github.com/mattjlewis/diozero",target:"_blank",rel:"noopener noreferrer"}},[e._v("DIOZero"),a("OutboundLink")],1),e._v(" library.")]),e._v(" "),a("p",[e._v("This Hardware Module allows to read data from the circuits, sensors, expansion cards, etc. connected to the device that\nhandle the ODA.")]),e._v(" "),a("p",[e._v("The configuration of this module, like the rest of I/O Controllers modules, specifies multiple configurations in one file.\nFor each line of the configuration file, we are specifying the configuration of one device that we want the ODA to handle.\nThis configuration is individual to each device and will have the next format:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("nameOfTheConfiguredChannel=property1:value1,property2:value2,...\nnameOfAnotherConfigureChannel=property1:anotherValue1,property2:anotherValue2,...\n")])])]),a("p",[e._v("For more details to use this module, go to its "),a("router-link",{attrs:{to:"/layers/hardware/i2c.html"}},[e._v("documentation page")])],1),e._v(" "),a("h4",{attrs:{id:"operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operations"}},[e._v("#")]),e._v(" Operations")]),e._v(" "),a("p",[e._v("All the operations implements an common API that have to be included in the ODA to run the operations. Each operation module\nimplements the functionality of an operation. The demos have included all operations available on ODA and this is recommended,\nbut in some cases maybe some operation wont be expected and it's not necessary to include it to ODA.")]),e._v(" "),a("p",[e._v("This operations work as follows:")]),e._v(" "),a("ol",[a("li",[e._v("The third system send a operation message, serialized in JSON format, to whatever ODA's connector.")]),e._v(" "),a("li",[e._v("ODA's connector pass the message to the dispatcher")]),e._v(" "),a("li",[e._v("The dispatcher deserialize the message.")]),e._v(" "),a("li",[e._v("The dispatcher get the operation code and search for implementation of that in its current catalogue.")]),e._v(" "),a("li",[e._v("The dispatcher run the implementation's process method.")]),e._v(" "),a("li",[e._v("The implementation of the operation processes the arrived information from the connector.")]),e._v(" "),a("li",[e._v("The operation returns a Result message that will be returned serialized to the connector.")]),e._v(" "),a("li",[e._v("Connector send the response message (AKA payload).")])]),e._v(" "),a("p",[e._v("If you need to do tests with the operations is highly recommended to use the MQTT connector and the "),a("a",{attrs:{href:"https://mosquitto.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mosquitto application"),a("OutboundLink")],1),e._v(".\nThis application mock a MQTT broker and allow to send messages / put listeners on that broker, so we can to enter manually\nthe operations messages that the ODA expects to do the operation.")]),e._v(" "),a("p",[e._v("This messages can be found in the Trace section of each documentation page of the "),a("router-link",{attrs:{to:"/layers/operations/"}},[e._v("Operations")])],1),e._v(" "),a("h5",{attrs:{id:"custom-operation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-operation"}},[e._v("#")]),e._v(" Custom Operation")]),e._v(" "),a("p",[e._v("To create your own operation, you have to implement the [Custom Operation Interface](../layers/operations/README.md#Custom Operations)\nIt's important that the third system can send the operation request that ODA expects and the specific format.")]),e._v(" "),a("h4",{attrs:{id:"state-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-manager"}},[e._v("#")]),e._v(" State Manager")]),e._v(" "),a("p",[e._v("There are currently two implementations of the dispatcher module.")]),e._v(" "),a("ul",[a("li",[e._v("Real Time Dispatcher: Dispatcher that doesn't store any data in itself. All the incoming data will be sent directly.")]),e._v(" "),a("li",[e._v("In Memory Dispatcher: Dispatcher that stores the incoming information to cna send it by request or handle derived information.")])]),e._v(" "),a("p",[e._v("To use the dispatchers, is necessary to include in the demo the dispatcher API, that contains the commons dispatcher functions.")]),e._v(" "),a("h5",{attrs:{id:"real-time-state-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#real-time-state-manager"}},[e._v("#")]),e._v(" Real Time State Manager")]),e._v(" "),a("p",[e._v("To deploy this dispatcher is important to use the Dispatcher API.")]),e._v(" "),a("p",[e._v("Nothing else is needed.")]),e._v(" "),a("h4",{attrs:{id:"in-memory-state-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-memory-state-manager"}},[e._v("#")]),e._v(" In Memory State Manager")]),e._v(" "),a("p",[e._v("To deploy this dispatcher you have to deploy the Dispatcher API, the Rule Engine API and the specific implementation of\nthe rule engine that you will use.")]),e._v(" "),a("p",[e._v("This is because the historic data will be used by the rulke engine bundle and is needed to include it to be used, having\nboth of these bundles a mutual dependency.")])])}),[],!1,null,null,null);t.default=n.exports}}]);