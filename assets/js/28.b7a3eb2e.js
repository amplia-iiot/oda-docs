(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{231:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"simulator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simulator"}},[e._v("#")]),e._v(" Simulator")]),e._v(" "),a("p",[e._v("This Datastream module enable to register datastreams with a constant value or a random value between two numbers specified by parameters.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/amplia-iiot/oda/tree/master/oda-datastreams/simulator",target:"_blank",rel:"noopener noreferrer"}},[e._v("To access source code click here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" Dependencies")]),e._v(" "),a("p",[a("em",[e._v("This module have no dependencies")])]),e._v(" "),a("h4",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("To configure ADC Datastream module, a file named "),a("em",[e._v("es.amplia.oda.datastreams.simulator.cfg")]),e._v(" must be created with the next parameters\nfor each input channel that you want to register:")]),e._v(" "),a("p",[e._v("In case of want to register a constant value:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("datastreamId")]),e._v(": "),a("em",[e._v("Required parameter")]),e._v(". Identifier of the datastream.")]),e._v(" "),a("li",[a("strong",[e._v("deviceId")]),e._v(": "),a("em",[e._v('void string ("") by default')]),e._v(". Identifier of the device that contents this datastream.")]),e._v(" "),a("li",[a("strong",[e._v("dataType")]),e._v(": "),a("em",[e._v("Required data")]),e._v(". Allowed values are: "),a("em",[e._v("string, int, integer, float, double, number")]),e._v(". Is th data-type of the datastream.")]),e._v(" "),a("li",[a("strong",[e._v("constantValue")]),e._v(": "),a("em",[e._v("Required data")]),e._v(". Value that always will return this datastream.")])]),e._v(" "),a("p",[e._v("In case of want a random numeric integer value:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("datastreamId")]),e._v(": "),a("em",[e._v("Required parameter")]),e._v(". Identifier of the datastream.")]),e._v(" "),a("li",[a("strong",[e._v("deviceId")]),e._v(": "),a("em",[e._v('void string ("") by default')]),e._v(". Identifier of the device that contents this datastream.")]),e._v(" "),a("li",[a("strong",[e._v("minValue")]),e._v(": "),a("em",[e._v("Required data")]),e._v(". Minimum value that the datastream can returns.")]),e._v(" "),a("li",[a("strong",[e._v("maxValue")]),e._v(": "),a("em",[e._v("Required data")]),e._v(". Maximum value that the datastream can returns.")]),e._v(" "),a("li",[a("strong",[e._v("maxDiff")]),e._v(": "),a("em",[e._v("Required data")]),e._v(". Percentage of the range that the value can change compared to the last. 100 if it doesn't matter how much changes")])]),e._v(" "),a("p",[a("em",[e._v("es.amplia.oda.datastreams.simulator.cfg")]),e._v(" will have a similar format to:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("constantValue,testDevice=string,this is a test value\nrandomValue=0,100,10\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);